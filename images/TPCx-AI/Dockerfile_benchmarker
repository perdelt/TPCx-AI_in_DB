######################################################################################
# Dockerfile for TPCx-AI supplements - TPCx-AI benchmark driver
######################################################################################
#
# This Dockerfile builds an image for generating TPCx-AI data.
#
# Base Image: ubuntu:20.04
#
# Author: Patrick K. Erdelt
# Email: patrick.erdelt@bht-berlin.de
# Date: 2024-05-26
# Version: 1.0
# Description: This container runs a bash script that runs phases of the TPCx-AI toolkit in Python.
# Data is generated into /tpcx-ai/output/raw_data/
# It expects the toolkit to be in a folder tpcx-ai-v1.0.3.1/
######################################################################################




###########################################
######### Start with clean Ubuntu #########
###########################################
FROM ubuntu:20.04


####################################################
######### Some meta data of the containers #########
####################################################
LABEL maintainer="Patrick K. Erdelt <patrick.erdelt@bht-berlin.de>"
LABEL version="1.0"
LABEL description="This container runs a bash script that runs phases of the TPCx-AI toolkit in Python."


#############################################
######### Set default configuration #########
#############################################
ENV TPCxAI_SCALE_FACTOR=1
ENV TPCxAI_NODE_COUNT=1
ENV TPCxAI_NODE_NUMBER=1
ENV TPCxAI_SEED=4234567890
ENV TPCxAI_STAGE=training
ENV TPCxAI_UC=
# Set the working directory in the container
WORKDIR /tpcx-ai


#################################################
######### Prepare container for toolkit #########
#################################################
# Avoid prompts from apt
ENV DEBIAN_FRONTEND=noninteractive

# Install Python and basic tools
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    wget \
    curl \
    gnupg \
    software-properties-common


# prerequisites for Anaconda with GUI packages
RUN apt-get install -y libgl1-mesa-glx libegl1-mesa libxrandr2 libxss1 \
    libxcursor1 libxcomposite1 libasound2 libxi6 libxtst6 libglvnd-dev \
    libsndfile-dev

# Install Anaconda for Python 3.6+
RUN wget https://repo.anaconda.com/archive/Anaconda3-2023.03-1-Linux-x86_64.sh && \
    mv Anaconda3-2023.03-1-Linux-x86_64.sh anaconda.sh && \
    bash anaconda.sh -b && \
    rm anaconda.sh

# Install libsndfile and their development packages
RUN apt-get install -y libsndfile1 libsndfile1-dev

# Install Java
RUN apt-get update && apt-get install -y openjdk-8-jdk 

# Set Java 8 as the default Java version
RUN update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
RUN update-alternatives --set javac /usr/lib/jvm/java-8-openjdk-amd64/bin/javac

# Install dependencies for sbt
RUN apt-get install apt-transport-https curl gnupg -yqq

# Add sbt repository
RUN echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" > /etc/apt/sources.list.d/sbt.list
RUN echo "deb https://repo.scala-sbt.org/scalasbt/debian /" > /etc/apt/sources.list.d/sbt_old.list

# Import repository key
RUN curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | gpg --no-default-keyring --keyring gnupg-ring:/etc/apt/trusted.gpg.d/scalasbt-release.gpg --import
RUN chmod 644 /etc/apt/trusted.gpg.d/scalasbt-release.gpg

# Update package lists and install sbt
RUN apt-get update && apt-get install -y sbt

# Set PATH to include conda, java, and sbt
ENV PATH /usr/bin/java:/usr/bin/sbt:/root/anaconda3/bin:$PATH

# Clean up APT when done
RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*


########################################
######### Copy and run toolkit #########
########################################
# Copy toolkit into image
COPY ./tpcx-ai-v1.0.3.1 /tpcx-ai

# Allow everything inside Docker container
RUN chmod -R 777 /tpcx-ai

# install any required prerequisites for running the single node AND create data from pdgf  
RUN ./setup-python.sh

# Copy script for running data generation
COPY ./benchmarker.sh /tpcx-ai/benchmarker.sh
RUN ["chmod", "+x", "/tpcx-ai/benchmarker.sh"]

# Install more
RUN apt-get update
# ZIP is needed for reporting
RUN apt install zip -y
# nice editing
RUN apt install nano -y

# start with benchmarking
ENTRYPOINT ["/tpcx-ai/benchmarker.sh"]
# CMD ["bash", "-c", "/tpcx-ai/benchmarker.sh"]












# start in bash for debugging
# CMD ["/bin/bash"]

# sudo docker run -v ~/data/pdgf:/tpcx-ai/lib/pdgf/output/ -it tpcx-ai
# then run:
# cd /tpcx-ai/lib/pdgf/
# java -cp "/tpcx-ai/lib/pdgf/*" -Djava.awt.headless=true -jar pdgf.jar


## code below is for running pdgf in docker container, but it doesn't work
## create and copy entrypoint.sh, set permissions
# RUN echo "#!/bin/bash" > entrypoint.sh \
#  && echo "echo -e \"-s\n\" | java -cp \"/tpcx-ai/lib/pdgf/*\" -Djava.awt.headless=true -jar /tpcx-ai/lib/pdgf/pdgf.jar" >> entrypoint.sh \
#  && chmod +x entrypoint.sh
# VOLUME ["/tpcx-ai/lib/pdgf/output"]

# # Set the entrypoint script to be executed
# ENTRYPOINT ["/tpcx-ai/entrypoint.sh"]

# try:
# sudo docker run -v ~/data/pdgf:/tpcx-ai/lib/pdgf/output/ tpcx-ai

# else: 
# sudo docker run -v ~/data/pdgf:/tpcx-ai/lib/pdgf/output/ -it --entrypoint /bin/bash tpcx-ai
# then run:
# cd /lib/pdgf/
# java -cp "/tpcx-ai/lib/pdgf/*" -Djava.awt.headless=true -jar pdgf.jar

